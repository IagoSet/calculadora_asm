try{let e="undefined"!=typeof window?window:"undefined"!=typeof global?global:"undefined"!=typeof globalThis?globalThis:"undefined"!=typeof self?self:{},r=(new e.Error).stack;r&&(e._sentryDebugIds=e._sentryDebugIds||{},e._sentryDebugIds[r]="c5546bed-4f82-454a-b017-d548477cfdde",e._sentryDebugIdIdentifier="sentry-dbid-c5546bed-4f82-454a-b017-d548477cfdde")}catch(e){}"use strict";exports.id=8291,exports.ids=[8291],exports.modules={18291:(e,r,t)=>{t.r(r),t.d(r,{fromProcess:()=>a});var i=t(19146),o=t(68696),s=t(61282),n=t(21764),d=t(30675);let c=(e,r,t)=>{if(1!==r.Version)throw Error(`Profile ${e} credential_process did not return Version 1.`);if(void 0===r.AccessKeyId||void 0===r.SecretAccessKey)throw Error(`Profile ${e} credential_process returned invalid credentials.`);if(r.Expiration){let t=new Date;if(new Date(r.Expiration)<t)throw Error(`Profile ${e} credential_process returned expired credentials.`)}let i=r.AccountId;!i&&t?.[e]?.aws_account_id&&(i=t[e].aws_account_id);let o={accessKeyId:r.AccessKeyId,secretAccessKey:r.SecretAccessKey,...r.SessionToken&&{sessionToken:r.SessionToken},...r.Expiration&&{expiration:new Date(r.Expiration)},...r.CredentialScope&&{credentialScope:r.CredentialScope},...i&&{accountId:i}};return(0,d.P)(o,"CREDENTIALS_PROCESS","w"),o},l=async(e,r,t)=>{let i=r[e];if(r[e]){let d=i.credential_process;if(void 0!==d){let i=(0,n.promisify)(s.exec);try{let t;let{stdout:o}=await i(d);try{t=JSON.parse(o.trim())}catch{throw Error(`Profile ${e} credential_process returned invalid JSON.`)}return c(e,t,r)}catch(e){throw new o.mV(e.message,{logger:t})}}else throw new o.mV(`Profile ${e} did not contain credential_process.`,{logger:t})}else throw new o.mV(`Profile ${e} could not be found in shared credentials file.`,{logger:t})},a=(e={})=>async({callerClientConfig:r}={})=>{e.logger?.debug("@aws-sdk/credential-provider-process - fromProcess");let t=await (0,i.MX)(e);return l((0,i.Jl)({profile:e.profile??r?.profile}),t,e.logger)}}};
//# sourceMappingURL=8291.js.map