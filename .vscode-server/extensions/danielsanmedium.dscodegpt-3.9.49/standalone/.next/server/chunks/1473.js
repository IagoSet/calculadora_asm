try{let e="undefined"!=typeof window?window:"undefined"!=typeof global?global:"undefined"!=typeof globalThis?globalThis:"undefined"!=typeof self?self:{},n=(new e.Error).stack;n&&(e._sentryDebugIds=e._sentryDebugIds||{},e._sentryDebugIds[n]="eeadbc89-ee70-4254-8568-148894008e73",e._sentryDebugIdIdentifier="sentry-dbid-eeadbc89-ee70-4254-8568-148894008e73")}catch(e){}"use strict";exports.id=1473,exports.ids=[1473],exports.modules={51473:(e,n,t)=>{t.d(n,{fromIni:()=>m});var r=t(19146),i=t(68696),o=t(30675);let s=(e,n,r)=>{let o={EcsContainer:async e=>{let{fromHttp:n}=await t.e(3294).then(t.bind(t,73294)),{fromContainerMetadata:o}=await t.e(6040).then(t.bind(t,76040));return r?.debug("@aws-sdk/credential-provider-ini - credential_source is EcsContainer"),async()=>(0,i.tS)(n(e??{}),o(e))().then(a)},Ec2InstanceMetadata:async e=>{r?.debug("@aws-sdk/credential-provider-ini - credential_source is Ec2InstanceMetadata");let{fromInstanceMetadata:n}=await t.e(6040).then(t.bind(t,76040));return async()=>n(e)().then(a)},Environment:async e=>{r?.debug("@aws-sdk/credential-provider-ini - credential_source is Environment");let{fromEnv:n}=await Promise.resolve().then(t.bind(t,14742));return async()=>n(e)().then(a)}};if(e in o)return o[e];throw new i.mV(`Unsupported credential source in profile ${n}. Got ${e}, expected EcsContainer or Ec2InstanceMetadata or Environment.`,{logger:r})},a=e=>(0,o.P)(e,"CREDENTIALS_PROFILE_NAMED_PROVIDER","p"),l=(e,{profile:n="default",logger:t}={})=>!!e&&"object"==typeof e&&"string"==typeof e.role_arn&&["undefined","string"].indexOf(typeof e.role_session_name)>-1&&["undefined","string"].indexOf(typeof e.external_id)>-1&&["undefined","string"].indexOf(typeof e.mfa_serial)>-1&&(d(e,{profile:n,logger:t})||c(e,{profile:n,logger:t})),d=(e,{profile:n,logger:t})=>{let r="string"==typeof e.source_profile&&void 0===e.credential_source;return r&&t?.debug?.(`    ${n} isAssumeRoleWithSourceProfile source_profile=${e.source_profile}`),r},c=(e,{profile:n,logger:t})=>{let r="string"==typeof e.credential_source&&void 0===e.source_profile;return r&&t?.debug?.(`    ${n} isCredentialSourceProfile credential_source=${e.credential_source}`),r},f=async(e,n,a,l={})=>{a.logger?.debug("@aws-sdk/credential-provider-ini - resolveAssumeRoleCredentials (STS)");let d=n[e],{source_profile:c,region:f}=d;if(!a.roleAssumer){let{getDefaultRoleAssumer:e}=await t.e(6375).then(t.bind(t,26375));a.roleAssumer=e({...a.clientConfig,credentialProviderLogger:a.logger,parentClientConfig:{...a?.parentClientConfig,region:f??a?.parentClientConfig?.region}},a.clientPlugins)}if(c&&c in l)throw new i.mV(`Detected a cycle attempting to resolve credentials for profile ${(0,r.Jl)(a)}. Profiles visited: `+Object.keys(l).join(", "),{logger:a.logger});a.logger?.debug(`@aws-sdk/credential-provider-ini - finding credential resolver using ${c?`source_profile=[${c}]`:`profile=[${e}]`}`);let g=c?I(c,n,a,{...l,[c]:!0},_(n[c]??{})):(await s(d.credential_source,e,a.logger)(a))();if(_(d))return g.then(e=>(0,o.P)(e,"CREDENTIALS_PROFILE_SOURCE_PROFILE","o"));{let n={RoleArn:d.role_arn,RoleSessionName:d.role_session_name||`aws-sdk-js-${Date.now()}`,ExternalId:d.external_id,DurationSeconds:parseInt(d.duration_seconds||"3600",10)},{mfa_serial:t}=d;if(t){if(!a.mfaCodeProvider)throw new i.mV(`Profile ${e} requires multi-factor authentication, but no MFA code callback was provided.`,{logger:a.logger,tryNextLink:!1});n.SerialNumber=t,n.TokenCode=await a.mfaCodeProvider(t)}let r=await g;return a.roleAssumer(r,n).then(e=>(0,o.P)(e,"CREDENTIALS_PROFILE_SOURCE_PROFILE","o"))}},_=e=>!e.role_arn&&!!e.credential_source,g=e=>!!e&&"object"==typeof e&&"string"==typeof e.credential_process,u=async(e,n)=>t.e(8291).then(t.bind(t,18291)).then(({fromProcess:t})=>t({...e,profile:n})().then(e=>(0,o.P)(e,"CREDENTIALS_PROFILE_PROCESS","v"))),p=async(e,n,r={})=>{let{fromSSO:i}=await t.e(8373).then(t.bind(t,58373));return i({profile:e,logger:r.logger,parentClientConfig:r.parentClientConfig,clientConfig:r.clientConfig})().then(e=>n.sso_session?(0,o.P)(e,"CREDENTIALS_PROFILE_SSO","r"):(0,o.P)(e,"CREDENTIALS_PROFILE_SSO_LEGACY","t"))},y=e=>e&&("string"==typeof e.sso_start_url||"string"==typeof e.sso_account_id||"string"==typeof e.sso_session||"string"==typeof e.sso_region||"string"==typeof e.sso_role_name),w=e=>!!e&&"object"==typeof e&&"string"==typeof e.aws_access_key_id&&"string"==typeof e.aws_secret_access_key&&["undefined","string"].indexOf(typeof e.aws_session_token)>-1&&["undefined","string"].indexOf(typeof e.aws_account_id)>-1,E=async(e,n)=>{n?.logger?.debug("@aws-sdk/credential-provider-ini - resolveStaticCredentials");let t={accessKeyId:e.aws_access_key_id,secretAccessKey:e.aws_secret_access_key,sessionToken:e.aws_session_token,...e.aws_credential_scope&&{credentialScope:e.aws_credential_scope},...e.aws_account_id&&{accountId:e.aws_account_id}};return(0,o.P)(t,"CREDENTIALS_PROFILE","n")},C=e=>!!e&&"object"==typeof e&&"string"==typeof e.web_identity_token_file&&"string"==typeof e.role_arn&&["undefined","string"].indexOf(typeof e.role_session_name)>-1,b=async(e,n)=>t.e(789).then(t.bind(t,20789)).then(({fromTokenFile:t})=>t({webIdentityTokenFile:e.web_identity_token_file,roleArn:e.role_arn,roleSessionName:e.role_session_name,roleAssumerWithWebIdentity:n.roleAssumerWithWebIdentity,logger:n.logger,parentClientConfig:n.parentClientConfig})().then(e=>(0,o.P)(e,"CREDENTIALS_PROFILE_STS_WEB_ID_TOKEN","q"))),I=async(e,n,t,r={},o=!1)=>{let s=n[e];if(Object.keys(r).length>0&&w(s))return E(s,t);if(o||l(s,{profile:e,logger:t.logger}))return f(e,n,t,r);if(w(s))return E(s,t);if(C(s))return b(s,t);if(g(s))return u(t,e);if(y(s))return await p(e,s,t);throw new i.mV(`Could not resolve credentials using profile: [${e}] in configuration/credentials file(s).`,{logger:t.logger})},m=(e={})=>async({callerClientConfig:n}={})=>{let t={...e,parentClientConfig:{...n,...e.parentClientConfig}};t.logger?.debug("@aws-sdk/credential-provider-ini - fromIni");let i=await (0,r.MX)(t);return I((0,r.Jl)({profile:e.profile??n?.profile}),i,t)}}};
//# sourceMappingURL=1473.js.map