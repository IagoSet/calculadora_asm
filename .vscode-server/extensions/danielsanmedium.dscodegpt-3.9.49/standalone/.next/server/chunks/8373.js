try{let e="undefined"!=typeof window?window:"undefined"!=typeof global?global:"undefined"!=typeof globalThis?globalThis:"undefined"!=typeof self?self:{},t=(new e.Error).stack;t&&(e._sentryDebugIds=e._sentryDebugIds||{},e._sentryDebugIds[t]="baf67625-1c8d-4fd8-adba-b117e4938373",e._sentryDebugIdIdentifier="sentry-dbid-baf67625-1c8d-4fd8-adba-b117e4938373")}catch(e){}"use strict";exports.id=8373,exports.ids=[8373],exports.modules={58373:(e,t,s)=>{s.d(t,{fromSSO:()=>_});var n=s(68696),o=s(19146);let i=e=>e&&("string"==typeof e.sso_start_url||"string"==typeof e.sso_account_id||"string"==typeof e.sso_session||"string"==typeof e.sso_region||"string"==typeof e.sso_role_name);var r=s(30675);let a="To refresh this SSO session run 'aws sso login' with the corresponding profile.",l=async(e,t={})=>{let{SSOOIDCClient:n}=await s.e(7516).then(s.bind(s,37516));return new n(Object.assign({},t.clientConfig??{},{region:e??t.clientConfig?.region,logger:t.clientConfig?.logger??t.parentClientConfig?.logger}))},g=async(e,t,n={})=>{let{CreateTokenCommand:o}=await s.e(7516).then(s.bind(s,37516));return(await l(t,n)).send(new o({clientId:e.clientId,clientSecret:e.clientSecret,refreshToken:e.refreshToken,grantType:"refresh_token"}))},f=e=>{if(e.expiration&&e.expiration.getTime()<Date.now())throw new n.rh(`Token is expired. ${a}`,!1)},c=(e,t,s=!1)=>{if(void 0===t)throw new n.rh(`Value not present for '${e}' in SSO Token${s?". Cannot refresh":""}. ${a}`,!1)},{writeFile:w}=s(92048).promises,d=(e,t)=>w((0,o.Py)(e),JSON.stringify(t,null,2)),h=new Date(0),p=(e={})=>async({callerClientConfig:t}={})=>{let s;let i={...e,parentClientConfig:{...t,...e.parentClientConfig}};i.logger?.debug("@aws-sdk/token-providers - fromSso");let r=await (0,o.MX)(i),l=(0,o.Jl)({profile:i.profile??t?.profile}),w=r[l];if(w){if(!w.sso_session)throw new n.rh(`Profile '${l}' is missing required property 'sso_session'.`)}else throw new n.rh(`Profile '${l}' could not be found in shared credentials file.`,!1);let p=w.sso_session,u=(await (0,o.G)(i))[p];if(!u)throw new n.rh(`Sso session '${p}' could not be found in shared credentials file.`,!1);for(let e of["sso_start_url","sso_region"])if(!u[e])throw new n.rh(`Sso session '${p}' is missing required property '${e}'.`,!1);u.sso_start_url;let S=u.sso_region;try{s=await (0,o.gH)(p)}catch(e){throw new n.rh(`The SSO session token associated with profile=${l} was not found or is invalid. ${a}`,!1)}c("accessToken",s.accessToken),c("expiresAt",s.expiresAt);let{accessToken:_,expiresAt:y}=s,m={token:_,expiration:new Date(y)};if(m.expiration.getTime()-Date.now()>3e5)return m;if(Date.now()-h.getTime()<3e4)return f(m),m;c("clientId",s.clientId,!0),c("clientSecret",s.clientSecret,!0),c("refreshToken",s.refreshToken,!0);try{h.setTime(Date.now());let e=await g(s,S,i);c("accessToken",e.accessToken),c("expiresIn",e.expiresIn);let t=new Date(Date.now()+1e3*e.expiresIn);try{await d(p,{...s,accessToken:e.accessToken,expiresAt:t.toISOString(),refreshToken:e.refreshToken})}catch(e){}return{token:e.accessToken,expiration:t}}catch(e){return f(m),m}},u=async({ssoStartUrl:e,ssoSession:t,ssoAccountId:i,ssoRegion:a,ssoRoleName:l,ssoClient:g,clientConfig:f,parentClientConfig:c,profile:w,logger:d})=>{let h,u;let S="To refresh this SSO session run aws sso login with the corresponding profile.";if(t)try{let e=await p({profile:w})();h={accessToken:e.token,expiresAt:new Date(e.expiration).toISOString()}}catch(e){throw new n.mV(e.message,{tryNextLink:!1,logger:d})}else try{h=await (0,o.gH)(e)}catch(e){throw new n.mV(`The SSO session associated with this profile is invalid. ${S}`,{tryNextLink:!1,logger:d})}if(new Date(h.expiresAt).getTime()-Date.now()<=0)throw new n.mV(`The SSO session associated with this profile has expired. ${S}`,{tryNextLink:!1,logger:d});let{accessToken:_}=h,{SSOClient:y,GetRoleCredentialsCommand:m}=await s.e(2820).then(s.bind(s,72820)),k=g||new y(Object.assign({},f??{},{logger:f?.logger??c?.logger,region:f?.region??a}));try{u=await k.send(new m({accountId:i,roleName:l,accessToken:_}))}catch(e){throw new n.mV(e,{tryNextLink:!1,logger:d})}let{roleCredentials:{accessKeyId:T,secretAccessKey:x,sessionToken:C,expiration:b,credentialScope:O,accountId:I}={}}=u;if(!T||!x||!C||!b)throw new n.mV("SSO returns an invalid temporary credential.",{tryNextLink:!1,logger:d});let D={accessKeyId:T,secretAccessKey:x,sessionToken:C,expiration:new Date(b),...O&&{credentialScope:O},...I&&{accountId:I}};return t?(0,r.P)(D,"CREDENTIALS_SSO","s"):(0,r.P)(D,"CREDENTIALS_SSO_LEGACY","u"),D},S=(e,t)=>{let{sso_start_url:s,sso_account_id:o,sso_region:i,sso_role_name:r}=e;if(!s||!o||!i||!r)throw new n.mV(`Profile is configured with invalid SSO credentials. Required parameters "sso_account_id", "sso_region", "sso_role_name", "sso_start_url". Got ${Object.keys(e).join(", ")}
Reference: https://docs.aws.amazon.com/cli/latest/userguide/cli-configure-sso.html`,{tryNextLink:!1,logger:t});return e},_=(e={})=>async({callerClientConfig:t}={})=>{e.logger?.debug("@aws-sdk/credential-provider-sso - fromSSO");let{ssoStartUrl:s,ssoAccountId:r,ssoRegion:a,ssoRoleName:l,ssoSession:g}=e,{ssoClient:f}=e,c=(0,o.Jl)({profile:e.profile??t?.profile});if(s||r||a||l||g){if(s&&r&&a&&l)return u({ssoStartUrl:s,ssoSession:g,ssoAccountId:r,ssoRegion:a,ssoRoleName:l,ssoClient:f,clientConfig:e.clientConfig,parentClientConfig:e.parentClientConfig,profile:c});throw new n.mV('Incomplete configuration. The fromSSO() argument hash must include "ssoStartUrl", "ssoAccountId", "ssoRegion", "ssoRoleName"',{tryNextLink:!1,logger:e.logger})}{let t=(await (0,o.MX)(e))[c];if(!t)throw new n.mV(`Profile ${c} was not found.`,{logger:e.logger});if(!i(t))throw new n.mV(`Profile ${c} is not configured with SSO credentials.`,{logger:e.logger});if(t?.sso_session){let i=(await (0,o.G)(e))[t.sso_session],r=` configurations in profile ${c} and sso-session ${t.sso_session}`;if(a&&a!==i.sso_region)throw new n.mV("Conflicting SSO region"+r,{tryNextLink:!1,logger:e.logger});if(s&&s!==i.sso_start_url)throw new n.mV("Conflicting SSO start_url"+r,{tryNextLink:!1,logger:e.logger});t.sso_region=i.sso_region,t.sso_start_url=i.sso_start_url}let{sso_start_url:r,sso_account_id:l,sso_region:g,sso_role_name:w,sso_session:d}=S(t,e.logger);return u({ssoStartUrl:r,ssoSession:d,ssoAccountId:l,ssoRegion:g,ssoRoleName:w,ssoClient:f,clientConfig:e.clientConfig,parentClientConfig:e.parentClientConfig,profile:c})}}}};
//# sourceMappingURL=8373.js.map